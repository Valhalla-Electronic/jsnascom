- Plan what the final product should look like. One idea was to grab a
  picture of my monitor and embed the framebuffer within along with
  icons for stuff like loading and saving nas files as well as more
  advanced/primitive operations like "replay from tape" and "record to
  tape".

    This picture unfortunately doesn't quite cut it:
    http://nascomhomepage.com/pics/nascom2-ensemble-half.jpg

  Storyboard what the UI would feel like and finally mock it up
  without the distraction of all the legacy Nascom/Spectrum code.

  It's probably worth making a special case for Safari on iOS to
  account for both limitations as well as unique capabilities.  The
  latter includes oritation support and touch/gestures.

  iOS presents a major challenge wrt keyboard handling. Clearly for
  games, providing direct (programmable?) one-touch support for
  certain keys (notably cursor keys) is a requirement.

- DONE support loading serial input from a file
- DONE support loading nas files
- DONE save and restore state (could certainly be improved though)
- Do terminal input like jslinux (use a small auto selected field, but keystrokes
  are immediately reflected in the terminal).
- Use the serial port for pending_input
- DONE fix input handling to not assume a raw keyboard and
       thus allow input of all chars
- Maybe pause z80 while in the input field?
- DONE swap case on input field
- DONE write protect the basic ROM
- support loading and saving tapes
- manage multiple snapshots
- button for external NMI
- DONE fix single stepping
- improve performance, especially on iPhone
  - DONE stop updating the whole screen all the time
  - use Typed arrays
  - use inlining memory accesses (hmm, protecting ROMs is tricky)
  - use periodic screen refresh instead of inline
  - exploit typed arrays to scan for changes four byte at a time
  - thrawl around for hints for JavaScript on iPhone
  - tune the T-state stuff.
  - recognize the idle loop and sleep instead of spinning
  - JIT it (great excuse for playing with TraceTree jitting)
- Reorganise and clean up the code
- figure out what port0 b2 and b5 does (goes to keyboard)
- add serial interface to files
- add support for importing sound files
- add touch support for arrow keys (configurable) so games are
  playable on the iPhone
- recognize the busy loop and sleep for the simulated amount of time rather
  than burning CPU cycles

       Test    T0 4000          FOR I=0 TO 2999:LET J=SIN(I):NEXT I
Perf
Mac Safari         46s  1               47s  (27s after speed fix)
Mac Chrome         50s  1.09            49s
Mac Firefox        64s  1.39            63s
iphone            221s  4.80          ~137s
